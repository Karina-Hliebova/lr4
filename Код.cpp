#include <iostream>
#include "windows.h"
#include <cmath>
using namespace std;

void task1(); //завдання 1, декларація функції
void task2();//завдання 2, декларація функції
void task3(); //завдання 3, декларація функції

int main() {
    SetConsoleOutputCP(1251);
    int menu; //виклик меню
    cout << "Номер завдання:";
    cin >> menu;
    cout << endl; //вільна строка між номером завдання та його реалізацією
    switch (menu) { //перемикання між функціями
      case 1: task1(); break; //завдання 1, Proc 6
      case 2: task2(); break; //завдання 2, Boolean 2
      case 3: task3(); break; //завдання 3, Integer 9
      default: cout << "Помилка! Тільки 1-3!" << endl; //сповіщення про помилку
    }
    cout << endl; // вільна строка задля візуального спрощення читання
    system("pause");
    return 0;
}

//Proc6
//Процедура, що знаходить кількість С цифр цілого додатнього числа К, а також їх суму S 
//(К - вхідний, С і S - вихідні параметри цілого типу). Знайти кількість і суму цифр для кожного
//з п'яти даних цілих чисел.
void DigitCountSum(int K, int& C, int& S) {
    if (K == 0) { // коли число стало 0 припиняється розв'язання
        return;
    }

    int digit = K % 10; // отримуємо останню цифру числа
    S += digit;         // додаємо її до суми
    C++;                // збільшуємо кількість цифр

    DigitCountSum(K / 10, C, S); // викликаємо функцію рекурсивно для залишку числа
}
void inputNumbers(int num[], int i) {
    if (i == 5) return;  // якщо індекс дорівнює 5, вирішення припиняється
    cin >> num[i];       // введеня числа
    inputNumbers(num, i + 1);  // рекурсивно викликаємо для наступного індекса
}

// рекурсивна функція для обробки і виведення інформації про числа
void processNumbers(int num[], int i) {
    if (i == 5) return;  // якщо індекс більше 5, вирішення зупиняється

    int C = 0, S = 0;
    DigitCountSum(num[i], C, S);  // функція для підрахунку кількості цифр і їх суми
    // виведення результату для поточного числа
    cout << "Число: " << num[i] << " Кількість цифр: " << C << " Сума цифр: " << S << endl;

    processNumbers(num, i + 1);  // рекурсивний виклик для наступного числа
}

void task1() {
    int num[5];  // масив для п'яти чисел
    cout << "Введіть 5 цілих чисел:" << endl; // введення 5 чисел
    inputNumbers(num, 0);  // виклик рекурсивної функції для вводу чисел

    cout << endl;
    processNumbers(num, 0);  // виклик рекурсивної функції для обробки чисел
}

//Boolean2
//Дано ціле число А. Перевірити істинність висловлювання: "Число А є непарним".
bool Boolean2(int A) { //функція перевірки коректності даних
    return 1; //число підходить
}
bool isOdd(int A) { //перевіряємо на парність введене число
    return A % 2 != 0;
}
void task2() {
    int A;
    cout << "Введіть ціле число:"; //введення числа
    cin >> A;
    cout << endl; //вільна строка задля спрощення читання

    if (!Boolean2(A)) {
        cout << "Помилка! Число повинно бути цілим!" << endl; //сповіщення про помилку
    }
    else {
        bool result = isOdd(A);
        cout << "Число є непарним:" << (result ? "Так." : "Ні.") << endl; //виведення результату
    }
}

//Integer9
//Дано тризначне число. Використовуючи одну операцію ділення остачі вивести першу цифру даного числа
//(сотні).
void task3() {
    int number;
    cout << "Введіть тризначне число:" << endl; //введення числа
    cin >> number;
    cout << endl; //вільна строка задля спрощення читання

    if (number < 100 || number > 999) { //умова для виконання завдання
        cout << "Помилка! Повинно бути три (3) цифри!" << endl; //сповіщення про помилку
    }

    int hundreds = number / 100; //обчислення першої цифри числа
    cout << "Перша цифра сотні:" << hundreds << endl; //виведення результату
}
